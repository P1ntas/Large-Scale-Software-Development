{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 106,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "title": "Confirm update request"
        },
        "elements": [
          {
            "hidden": false,
            "id": "name",
            "labelWidth": 10,
            "section": "",
            "title": "Name",
            "tooltip": "",
            "type": "string",
            "uid": "666ebeaf-0604-4da6-8a7c-e669094ec811",
            "unit": "",
            "value": ""
          },
          {
            "id": "duration",
            "labelWidth": 10,
            "section": "",
            "title": "Duration",
            "tooltip": "",
            "type": "number",
            "uid": "5e7bb5fb-1845-446b-8dbc-2d3f8c28a12c",
            "unit": "mins",
            "value": 0
          },
          {
            "id": "energetic_costs",
            "labelWidth": 10,
            "section": "",
            "title": "Energetic",
            "tooltip": "",
            "type": "number",
            "uid": "7f07b0f9-9725-4ffe-8976-0e61b922005b",
            "unit": "",
            "value": 0
          }
        ],
        "initial": {
          "code": "console.log(data, response, initial, elements);\n\n\n\n/**\n * Data Source\n * Requires form elements to be defined\n */\nconst dataQuery = toDataQueryResponse(response);\nconsole.log(dataQuery);",
          "contentType": "application/json",
          "datasource": "PostgreSQL",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "datasource"
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (response && response.ok) {\n  notifySuccess(['Update', 'Values updated successfully.']);\n  locationService.reload();\n} else {\n  notifyError(['Update', 'An error occured updating values.']);\n}",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial"
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": true,
        "update": {
          "code": "if (response && response.ok) {\n  notifySuccess(['Update', 'Values updated successfully.']);\n  locationService.reload();\n} else {\n  notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "contentType": "application/json",
          "datasource": "PostgreSQL",
          "getPayload": "const payload = {};\n\nelements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\n\n\n/**\n * Data Source payload\n */\nreturn {\n  rawSql: 'INSERT INTO task(system_id, name, duration, energetic_costs) VALUES(3, \\'' + payload.name + '\\', \\'' + payload.duration + ' min \\',' + payload.energetic_costs + ');',\n  format: 'table',\n};",
          "method": "datasource",
          "payloadMode": "custom"
        }
      },
      "pluginVersion": "3.4.0",
      "title": "Job Scheduling ",
      "type": "volkovlabs-form-panel"
    },
    {
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 8
      },
      "id": 2,
      "title": "System View",
      "type": "row"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "PostgreSQL"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "Maintenance Required": {
                  "color": "yellow",
                  "index": 2
                },
                "Offline": {
                  "color": "red",
                  "index": 3
                },
                "Online": {
                  "color": "green",
                  "index": 0
                },
                "Working": {
                  "color": "blue",
                  "index": 1
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 9
      },
      "id": 4,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "/^status$/",
          "values": false
        },
        "textMode": "value"
      },
      "pluginVersion": "10.1.4",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PostgreSQL"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select status from system s where id = $system_id ",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "PostgreSQL"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Key"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 118
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 4,
        "x": 0,
        "y": 12
      },
      "id": 1,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": false,
        "sortBy": []
      },
      "pluginVersion": "10.1.4",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PostgreSQL"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT 'Name' AS \"Key\", sm.name::text AS \"Value\" FROM system s\r\nINNER JOIN system_model sm ON sm.id = s.system_model_id\r\nWHERE s.id = $system_id\r\n\r\nUNION ALL\r\n\r\nSELECT 'Manufacturer' AS \"Key\", sm.manufacturer::text AS \"Value\" FROM system s\r\nINNER JOIN system_model sm ON sm.id = s.system_model_id\r\nWHERE s.id = $system_id\r\n\r\nUNION ALL\r\n\r\nSELECT 'Type' AS \"Key\", sm.type::text AS \"Value\" FROM system s\r\nINNER JOIN system_model sm ON sm.id = s.system_model_id\r\nWHERE s.id = $system_id\r\n\r\nUNION ALL\r\n\r\nSELECT 'Expansions' AS \"Key\", COUNT(e.id)::text AS \"Value\" FROM system s\r\nLEFT JOIN expansion e ON e.system_id = s.id\r\nWHERE s.id = $system_id;\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "System Information",
      "type": "table"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "PostgreSQL"
      },
      "gridPos": {
        "h": 9,
        "w": 6,
        "x": 4,
        "y": 12
      },
      "id": 6,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let all_data = [];\nlet colorMap = {\n  'Expansions Online': '#91cc75',\n  'Expansions Working': '#5470c6',\n  'Expansions Requiring Maintenance': '#fac858',\n  'Expansions Offline': '#ee6666'\n};\n\ndata.series.forEach((s) => {\n  ['Expansions Online', 'Expansions Working', 'Expansions Requiring Maintenance', 'Expansions Offline'].forEach((status) => {\n    let value = s.fields.find((f) => f.name === status).values;\n    if (value > 0) {\n      all_data.push({ value, name: status, color: colorMap[status] });\n    }\n  });\n});\n\n// Sort the data for the chart by value in descending order\nall_data.sort((a, b) => b.value - a.value);\n\n// Define a custom order for the legend data\nconst customLegendOrder = ['Expansions Online', 'Expansions Working', 'Expansions Requiring Maintenance', 'Expansions Offline'];\n\n// Use the custom order for the legend data\nlet legendData = customLegendOrder.filter((item) => all_data.some((data) => data.name === item));\n\n// Use the all_data array for your chart\nreturn {\n  title: {\n    text: 'Expansion Status v3',\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b}: {c} ({d}%)'\n  },\n  legend: {\n    orient: 'horizontal',\n    bottom: 10,\n    data: legendData // Use custom ordered legend data\n  },\n  series: [\n    {\n      name: 'System Status',\n      type: 'pie',\n      radius: '50%',\n      data: all_data, // Use all_data for your chart\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      },\n      // Set item color based on the color property in all_data\n      itemStyle: {\n        color: (params) => params.data.color\n      }\n    }\n  ]\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        }
      },
      "pluginVersion": "10.1.4",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PostgreSQL"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\r\n    SUM(CASE WHEN expansion.status = 'Online' THEN 1 ELSE 0 END) AS \"Expansions Online\",\r\n    SUM(CASE WHEN expansion.status = 'Working' THEN 1 ELSE 0 END) AS \"Expansions Working\",\r\n    SUM(CASE WHEN expansion.status = 'Maintenance Required' THEN 1 ELSE 0 END) AS \"Expansions Requiring Maintenance\",\r\n    SUM(CASE WHEN expansion.status = 'Offline' THEN 1 ELSE 0 END) AS \"Expansions Offline\"\r\nFROM system\r\nINNER JOIN expansion ON system.id = expansion.system_id\r\nWHERE system.id = $system_id \r\n\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "PCC52D03280B7034C"
      },
      "gridPos": {
        "h": 9,
        "w": 14,
        "x": 10,
        "y": 12
      },
      "id": 48,
      "options": {
        "dedupStrategy": "none",
        "enableLogDetails": true,
        "prettifyLogMessage": false,
        "showCommonLabels": false,
        "showLabels": false,
        "showTime": false,
        "sortOrder": "Descending",
        "wrapLogMessage": false
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PCC52D03280B7034C"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\r\n    timestamp AS \"time\",\r\n    s.id AS \"sensor_id\",\r\n    s.status AS \"sensor_status\"\r\nFROM\r\n    sensor s\r\nJOIN\r\n    expansion e ON s.expansion_id = e.id\r\nJOIN\r\n    system sys ON e.system_id = sys.id\r\nJOIN\r\n    factory f ON sys.factory_id = f.id\r\nWHERE\r\n    timestamp >= $__timeFrom() AND timestamp <= $__timeTo()\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Status Logs",
      "type": "logs"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "PCC52D03280B7034C"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 63,
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineWidth": 1,
            "spanNulls": 3600000
          },
          "links": [
            {
              "title": "${__data.fields.task_name}",
              "url": "http://${host:query}:3000/d/c7c8ba81-b8a4-4c6f-ae15-16bdb1dcf65b/systems-view?var-task_id=${__data.fields.task_id}﻿&﻿${factory_name:queryparam}﻿&﻿${factory_id:queryparam}﻿&﻿${system_id:queryparam}﻿&﻿${system_model_name:queryparam}﻿&﻿${expansion_id:queryparam}﻿&﻿${sensor_id:queryparam}﻿&var-task_timeseries_id=${__data.fields.task_timeseries_id}"
            }
          ],
          "mappings": [
            {
              "options": {
                "pattern": "[ABCD].*",
                "result": {
                  "color": "dark-red",
                  "index": 0
                }
              },
              "type": "regex"
            },
            {
              "options": {
                "pattern": "[EFGH].*",
                "result": {
                  "color": "dark-orange",
                  "index": 1
                }
              },
              "type": "regex"
            },
            {
              "options": {
                "pattern": "[IJKL].*",
                "result": {
                  "color": "dark-green",
                  "index": 2
                }
              },
              "type": "regex"
            },
            {
              "options": {
                "pattern": "[MNOP].*",
                "result": {
                  "color": "dark-blue",
                  "index": 3
                }
              },
              "type": "regex"
            },
            {
              "options": {
                "pattern": "[QRST].*",
                "result": {
                  "color": "dark-purple",
                  "index": 4
                }
              },
              "type": "regex"
            },
            {
              "options": {
                "pattern": "[UVW].*",
                "result": {
                  "color": "red",
                  "index": 5
                }
              },
              "type": "regex"
            },
            {
              "options": {
                "pattern": "[XYZ].*",
                "result": {
                  "color": "orange",
                  "index": 6
                }
              },
              "type": "regex"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "task_id"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "task_timeseries_id"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "task_name"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Task"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 21
      },
      "id": 80,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "mergeValues": false,
        "rowHeight": 1,
        "showValue": "auto",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PCC52D03280B7034C"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "(SELECT tt.timestamp, t.name AS task_name, tt.task_id, tt.id as task_timeseries_id\r\nFROM task_timeseries tt\r\nINNER JOIN task t ON tt.task_id = t.id\r\nWHERE tt.task_id IS NOT NULL\r\nAND tt.system_id = $system_id \r\nAND tt.timestamp between $__timeFrom() AND $__timeTo() \r\n\r\nUNION\r\n\r\nSELECT tt.timestamp, NULL AS task_name, NULL as task_id,  tt.id as task_timeseries_id\r\nFROM task_timeseries tt\r\nWHERE tt.task_id IS NULL\r\nAND tt.system_id = $system_id \r\nAND tt.timestamp between $__timeFrom() AND $__timeTo() \r\n)\r\n\r\nORDER BY timestamp;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "System Task Schedule",
      "transformations": [],
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "PCC52D03280B7034C"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 0,
        "y": 28
      },
      "id": 93,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "10.1.4",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PCC52D03280B7034C"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select  t.name, ts.timestamp as \"Start\", t.duration as \"Duration\", t.energetic_costs as \"Power Cost\" from task_timeseries ts\r\ninner join task t on t.id = ts.task_id\r\n\r\nwhere ts.id = $task_timeseries_id ",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Task Info",
      "transformations": [],
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 33
      },
      "id": 3,
      "panels": [],
      "repeat": "expansion_id",
      "repeatDirection": "h",
      "title": "Expansion $expansion_id",
      "type": "row"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "PostgreSQL"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Key"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 117
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 12,
        "w": 4,
        "x": 0,
        "y": 34
      },
      "id": 7,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": false,
        "sortBy": []
      },
      "pluginVersion": "10.1.4",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PostgreSQL"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT 'Name' AS \"Key\", em.name::text AS \"Value\" FROM expansion e\r\nINNER JOIN expansion_model em ON em.id = e.expansion_model_id\r\nWHERE e.id in ($expansion_id)\r\n\r\nUNION ALL\r\n\r\nSELECT 'Manufacturer' AS \"Key\", em.manufacturer::text AS \"Value\" FROM expansion e\r\nINNER JOIN expansion_model em ON em.id = e.expansion_model_id\r\nWHERE e.id in ($expansion_id)\r\n\r\nUNION ALL\r\n\r\nSELECT 'Type' AS \"Key\", em.type::text AS \"Value\" FROM expansion e\r\nINNER JOIN expansion_model em ON em.id = e.expansion_model_id\r\nWHERE e.id in ($expansion_id)\r\n\r\nUNION ALL\r\n\r\nSELECT 'Sensors' AS \"Key\", COUNT(s.id)::text AS \"Value\" FROM sensor s\r\nWHERE s.expansion_id in ($expansion_id);\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Expansion",
      "type": "table"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "PBFA97CFB590B2093"
      },
      "gridPos": {
        "h": 12,
        "w": 5,
        "x": 4,
        "y": 34
      },
      "id": 29,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let value = 0\ndata.series.forEach((s) => {\n  let values = s.fields.find((f) => f.name === 'current_value').values;\n  value = values[values.length - 1].toFixed(2);;\n});\n\nreturn {\n  title: { // Add a title here\n    text: 'Temperature',\n    left: 'center', // Center the title\n    bottom: '10%'\n  },\n  series: [\n    {\n      type: 'gauge',\n      center: ['50%', '60%'],\n      startAngle: 200,\n      endAngle: -20,\n      min: 0,\n      max: 100,\n      splitNumber: 10,\n      itemStyle: {\n        color: '#FFAB91'\n      },\n      progress: {\n        show: true,\n        width: 30\n      },\n      pointer: {\n        show: false\n      },\n      axisLine: {\n        lineStyle: {\n          width: 30\n        }\n      },\n      axisTick: {\n        distance: -45,\n        splitNumber: 5,\n        lineStyle: {\n          width: 2,\n          color: '#999'\n        }\n      },\n      splitLine: {\n        distance: -52,\n        length: 14,\n        lineStyle: {\n          width: 3,\n          color: '#999'\n        }\n      },\n      axisLabel: {\n        distance: -20,\n        color: '#999',\n        fontSize: 20\n      },\n      anchor: {\n        show: false\n      },\n      title: {\n        show: false\n      },\n      detail: {\n        valueAnimation: true,\n        width: '60%',\n        lineHeight: 40,\n        borderRadius: 8,\n        offsetCenter: [0, '-15%'],\n        fontSize: 40,\n        fontWeight: 'bolder',\n        formatter: '{value} °C',\n        color: 'inherit'\n      },\n      data: [\n        {\n          value: value\n        }\n      ]\n    },\n    {\n      type: 'gauge',\n      center: ['50%', '60%'],\n      startAngle: 200,\n      endAngle: -20,\n      min: 0,\n      max: 60,\n      itemStyle: {\n        color: '#FD7347'\n      },\n      progress: {\n        show: true,\n        width: 8\n      },\n      pointer: {\n        show: false\n      },\n      axisLine: {\n        show: false\n      },\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        show: false\n      },\n      axisLabel: {\n        show: false\n      },\n      detail: {\n        show: false\n      },\n      data: [\n        {\n          value: 20\n        }\n      ]\n    }\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Prometheus"
          },
          "disableTextWrap": false,
          "editorMode": "builder",
          "expr": "current_value{sensor_id=\"$expansion_id\"}",
          "fullMetaSearch": false,
          "includeNullMetadata": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A",
          "useBackend": false
        }
      ],
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "PBFA97CFB590B2093"
      },
      "gridPos": {
        "h": 12,
        "w": 5,
        "x": 9,
        "y": 34
      },
      "id": 32,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let value = 0\ndata.series.forEach((s) => {\n  let values = s.fields.find((f) => f.name === 'current_value').values;\n  value = values[values.length - 1].toFixed(2);;\n});\n\n\nreturn {\n  title: { // Add a title here\n    text: 'Temperature',\n    left: 'center', // Center the title\n    bottom: '10%'\n  },\n  series: [\n    {\n      type: 'gauge',\n      axisLine: {\n        lineStyle: {\n          width: 30,\n          color: [\n            [0.15, '#fd666d'],\n            [0.3, '#fac858'],\n            [0.7, '#91cc75'],\n            [0.85, '#fac858'],\n            [1, '#fd666d']\n          ]\n        }\n      },\n      pointer: {\n        itemStyle: {\n          color: 'auto'\n        }\n      },\n      axisTick: {\n        distance: -30,\n        length: 8,\n        lineStyle: {\n          color: '#fff',\n          width: 2\n        }\n      },\n      splitLine: {\n        distance: -30,\n        length: 30,\n        lineStyle: {\n          color: '#fff',\n          width: 4\n        }\n      },\n      axisLabel: {\n        color: 'inherit',\n        distance: 40,\n        fontSize: 20\n      },\n      detail: {\n        valueAnimation: true,\n        formatter: '{value} ºC',\n        color: 'inherit',\n        fontSize: 25,\n      },\n      data: [\n        {\n          value: value,\n          fontSize: 20\n        }\n      ]\n    }\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Prometheus"
          },
          "disableTextWrap": false,
          "editorMode": "builder",
          "expr": "current_value{sensor_id=\"$expansion_id\"}",
          "fullMetaSearch": false,
          "includeNullMetadata": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A",
          "useBackend": false
        }
      ],
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "PBFA97CFB590B2093"
      },
      "gridPos": {
        "h": 12,
        "w": 5,
        "x": 14,
        "y": 34
      },
      "id": 31,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let value = 0\ndata.series.forEach((s) => {\n  let values = s.fields.find((f) => f.name === 'current_value').values;\n  value = values[values.length - 1].toFixed(2);;\n});\n\n\nreturn {\n  tooltip: {\n    formatter: '{a} <br/>{b} : {c}%'\n  },\n  series: [\n    {\n      name: 'Flow Rate',\n      type: 'gauge',\n      detail: { formatter: '{value}%' },\n      data: [{ value: value, name: 'Flow Rate' }]\n    }\n  ]\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Prometheus"
          },
          "disableTextWrap": false,
          "editorMode": "builder",
          "expr": "current_value{sensor_id=\"$expansion_id\"}",
          "fullMetaSearch": false,
          "includeNullMetadata": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A",
          "useBackend": false
        }
      ],
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "PBFA97CFB590B2093"
      },
      "gridPos": {
        "h": 12,
        "w": 5,
        "x": 19,
        "y": 34
      },
      "id": 30,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let value = 0\ndata.series.forEach((s) => {\n  let values = s.fields.find((f) => f.name === 'current_value').values;\n  value = values[values.length - 1].toFixed(2);;\n});\n\n\nreturn {\n  title: { // Add a title here\n    text: 'Barometer',\n    left: 'center', // Center the title\n    bottom: '10%'\n  },\n  series: [\n    {\n      type: 'gauge',\n      min: 0,\n      max: 100,\n      splitNumber: 10,\n      radius: '70%',\n      axisLine: {\n        lineStyle: {\n          color: [[1, '#f00']],\n          width: 3\n        }\n      },\n      splitLine: {\n        distance: -18,\n        length: 18,\n        lineStyle: {\n          color: '#f00'\n        }\n      },\n      axisTick: {\n        distance: -12,\n        length: 10,\n        lineStyle: {\n          color: '#f00'\n        }\n      },\n      axisLabel: {\n        distance: -50,\n        color: '#f00',\n        fontSize: 25\n      },\n      anchor: {\n        show: true,\n        size: 20,\n        itemStyle: {\n          borderColor: '#000',\n          borderWidth: 2\n        }\n      },\n      pointer: {\n        offsetCenter: [0, '10%'],\n        icon: 'path://M2090.36389,615.30999 L2090.36389,615.30999 C2091.48372,615.30999 2092.40383,616.194028 2092.44859,617.312956 L2096.90698,728.755929 C2097.05155,732.369577 2094.2393,735.416212 2090.62566,735.56078 C2090.53845,735.564269 2090.45117,735.566014 2090.36389,735.566014 L2090.36389,735.566014 C2086.74736,735.566014 2083.81557,732.63423 2083.81557,729.017692 C2083.81557,728.930412 2083.81732,728.84314 2083.82081,728.755929 L2088.2792,617.312956 C2088.32396,616.194028 2089.24407,615.30999 2090.36389,615.30999 Z',\n        length: '115%',\n        itemStyle: {\n          color: '#000'\n        }\n      },\n      detail: {\n        valueAnimation: true,\n        precision: 1\n      },\n      title: {\n        offsetCenter: [0, '-50%']\n      },\n      data: [\n        {\n          value: value,\n          name: 'PLP'\n        }\n      ]\n    },\n    {\n      type: 'gauge',\n      min: 0,\n      max: 60,\n      radius: '69%',\n      splitNumber: 6,\n      axisLine: {\n        lineStyle: {\n          color: [[1, '#000']],\n          width: 3\n        }\n      },\n      splitLine: {\n        distance: -3,\n        length: 18,\n        lineStyle: {\n          color: '#000'\n        }\n      },\n      axisTick: {\n        distance: 0,\n        length: 10,\n        lineStyle: {\n          color: '#000'\n        }\n      },\n      axisLabel: {\n        distance: 10,\n        fontSize: 25,\n        color: '#000'\n      },\n      pointer: {\n        show: false\n      },\n      title: {\n        show: false\n      },\n      anchor: {\n        show: true,\n        size: 14,\n        itemStyle: {\n          color: '#000'\n        }\n      }\n    }\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Prometheus"
          },
          "disableTextWrap": false,
          "editorMode": "builder",
          "expr": "current_value{sensor_id=\"$expansion_id\"}",
          "fullMetaSearch": false,
          "includeNullMetadata": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A",
          "useBackend": false
        }
      ],
      "type": "volkovlabs-echarts-panel"
    }
  ],
  "refresh": "30s",
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "development",
          "value": "localhost"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Host",
        "multi": false,
        "name": "host",
        "options": [
          {
            "selected": true,
            "text": "development",
            "value": "localhost"
          },
          {
            "selected": false,
            "text": "deployment",
            "value": "34.42.26.53"
          }
        ],
        "query": "development : localhost, deployment : 34.42.26.53",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "Bosch",
          "value": "Bosch"
        },
        "datasource": {
          "type": "postgres",
          "uid": "PostgreSQL"
        },
        "definition": "select name from factory",
        "hide": 0,
        "includeAll": false,
        "label": "Factory Name",
        "multi": false,
        "name": "factory_name",
        "options": [],
        "query": "select name from factory",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "All",
          "value": "All"
        },
        "datasource": {
          "type": "postgres",
          "uid": "PostgreSQL"
        },
        "definition": "select id from factory where name in ('${factory_name:text}')",
        "hide": 2,
        "includeAll": false,
        "label": "Factory ID",
        "multi": false,
        "name": "factory_id",
        "options": [],
        "query": "select id from factory where name in ('${factory_name:text}')",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "9",
          "value": "9"
        },
        "datasource": {
          "type": "postgres",
          "uid": "PostgreSQL"
        },
        "definition": "select s.id from system s\ninner join factory f on f.id = s.factory_id\nwhere f.id = $factory_id",
        "hide": 0,
        "includeAll": false,
        "label": "System",
        "multi": false,
        "name": "system_id",
        "options": [],
        "query": "select s.id from system s\ninner join factory f on f.id = s.factory_id\nwhere f.id = $factory_id",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "CP Lab",
          "value": "CP Lab"
        },
        "datasource": {
          "type": "postgres",
          "uid": "PostgreSQL"
        },
        "definition": "select name from system_model sm\ninner join system s on s.system_model_id = sm.id\nwhere s.id = $system_id",
        "hide": 0,
        "includeAll": false,
        "label": "System Name",
        "multi": false,
        "name": "system_model_name",
        "options": [],
        "query": "select name from system_model sm\ninner join system s on s.system_model_id = sm.id\nwhere s.id = $system_id",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": "auto",
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": {
          "type": "postgres",
          "uid": "PostgreSQL"
        },
        "definition": "select e.id from expansion e\ninner join system s on s.id = e.system_id\nwhere s.id = $system_id",
        "hide": 2,
        "includeAll": true,
        "label": "Expansion ID",
        "multi": false,
        "name": "expansion_id",
        "options": [],
        "query": "select e.id from expansion e\ninner join system s on s.id = e.system_id\nwhere s.id = $system_id",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": true,
          "text": [],
          "value": []
        },
        "datasource": {
          "type": "postgres",
          "uid": "PostgreSQL"
        },
        "definition": "select id from sensor where expansion_id in ($expansion_id)",
        "hide": 2,
        "includeAll": true,
        "label": "Sensor ID",
        "multi": true,
        "name": "sensor_id",
        "options": [],
        "query": "select id from sensor where expansion_id in ($expansion_id)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "17",
          "value": "17"
        },
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "task_id",
        "options": [
          {
            "selected": false,
            "text": "None",
            "value": "None"
          }
        ],
        "query": "None",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "416",
          "value": "416"
        },
        "description": "",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "task_timeseries_id",
        "options": [
          {
            "selected": false,
            "text": "None",
            "value": "None"
          }
        ],
        "query": "None",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-12h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Systems View",
  "uid": "c7c8ba81-b8a4-4c6f-ae15-16bdb1dcf65b",
  "version": 63,
  "weekStart": ""
}